// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace LangrisserHelper.Client.Pages.GameRoom
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Langrisser\LangrisserHelper\LangrisserHelper\Client\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Langrisser\LangrisserHelper\LangrisserHelper\Client\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Langrisser\LangrisserHelper\LangrisserHelper\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Langrisser\LangrisserHelper\LangrisserHelper\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Langrisser\LangrisserHelper\LangrisserHelper\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Langrisser\LangrisserHelper\LangrisserHelper\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Langrisser\LangrisserHelper\LangrisserHelper\Client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Langrisser\LangrisserHelper\LangrisserHelper\Client\_Imports.razor"
using LangrisserHelper.Client.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\Langrisser\LangrisserHelper\LangrisserHelper\Client\_Imports.razor"
using Blazored.Toast;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\Langrisser\LangrisserHelper\LangrisserHelper\Client\_Imports.razor"
using Blazored.Toast.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\Langrisser\LangrisserHelper\LangrisserHelper\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\Langrisser\LangrisserHelper\LangrisserHelper\Client\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Langrisser\LangrisserHelper\LangrisserHelper\Client\Pages\GameRoom\FightingRoom.razor"
using LangrisserHelper.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Langrisser\LangrisserHelper\LangrisserHelper\Client\Pages\GameRoom\FightingRoom.razor"
using LangrisserHelper.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Langrisser\LangrisserHelper\LangrisserHelper\Client\Pages\GameRoom\FightingRoom.razor"
using LangrisserHelper.Client.Pages.Component;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Langrisser\LangrisserHelper\LangrisserHelper\Client\Pages\GameRoom\FightingRoom.razor"
using Microsoft.AspNetCore.SignalR.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\Langrisser\LangrisserHelper\LangrisserHelper\Client\Pages\GameRoom\FightingRoom.razor"
           [Authorize]

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/Room/{groupName}")]
    public partial class FightingRoom : Microsoft.AspNetCore.Components.ComponentBase, IDisposable
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 123 "D:\Langrisser\LangrisserHelper\LangrisserHelper\Client\Pages\GameRoom\FightingRoom.razor"
       
    // 로스터 진행
    private bool IsVisibleMyRoaster;
    private bool IsVisibleOpponentRoaster;
    private bool IsPlaying;

    private string msg;

    private string lastMsg;
    //
    [Parameter]
    public string groupName { get; set; }
    public string myName;
    public bool IsConnected { get => gameClient != null && gameClient.Connected; }
    public HubConnectionState State { get; set; } = HubConnectionState.Disconnected;
    public string StateMessage { get; set; }
    Player player;
    List<Player> players = new List<Player>();
    GameClient gameClient;
    Player Opponent;

    List<String> Messages = new List<string>();

    List<Hero_Class> MySelectedHeros = new List<Hero_Class>();
    List<Hero_Class> OpSelectedHeros = new List<Hero_Class>();

    LangrisserHelper.Client.Pages.Component.RoasterViewer myRoasterView;
    LangrisserHelper.Client.Pages.Component.RoasterViewer opRoasterView;

    async Task EnterRoom()
    {
    }
    void MessageArrived(string text)
    {
        Messages.Add(text);
        StateHasChanged();
        System.Diagnostics.Debug.WriteLine(text);
    }
    void OpponentChanged(Player opponent)
    {
        IsVisibleOpponentRoaster = (opponent != null);
        System.Diagnostics.Debug.WriteLine($"{opponent.Name} : {(opponent.Roaster ?? new List<int>()).Count}");
        StateHasChanged();
    }
    void StartGame()
    {
        IsPlaying = true;
        StateHasChanged();
        TurnChanged(1);
    }
    void EndGame()
    {
        IsPlaying = false;
        StateHasChanged();
    }
    void TurnChanged(int turn)
    {
        myRoasterView.TurnChanged(turn);
        opRoasterView.TurnChanged(turn);
        StateHasChanged();
    }
    private void SetTimer()
    {

    }
    async Task Stop()
    {
        if (gameClient != null && gameClient.Connected)
        {
            await gameClient.LeaveAsync();
        }
    }

    async Task SendMessage()
    {
        if (lastMsg == msg)
            return;
        if (gameClient != null && gameClient.Connected)
        {
            lastMsg = msg;
            await gameClient.SendMessageAsync(msg);
            msg = null;
        }
    }
    async Task OnKeyUpEvent(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await SendMessage();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (string.IsNullOrEmpty(groupName))
                groupName = "테스트방";
            if (player == null)
            {
                player = new Player();
                player.Name = await GetUserName();
                player.Face = "1";
                player.JoinedOn = DateTime.Now;
                player.Roaster = RoasterService.MyRoasterIds;
            }
            if (gameClient == null || !gameClient.Connected)
            {
                gameClient = new GameClient(groupName, player, NavManager.BaseUri);
                gameClient.MessageArrived += MessageArrived;
                gameClient.OpponentChanged += OpponentChanged;
                gameClient.StartGameEvent += StartGame;
                gameClient.TurnChanged += TurnChanged;
                gameClient.EndGameEvent += EndGame;
                await gameClient.EnterAsync();
                State = HubConnectionState.Connected;
                StateMessage = "Game started.";

                //await JsRuntime.FocusAsync(_canvasContainer);
            }
            IsVisibleMyRoaster = true;
            StateHasChanged();
        }
    }

    private async Task<string> GetUserName()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        return user.Identity.Name;
    }

    async Task ReadyButton()
    {
        if (gameClient != null && gameClient.Connected)
        {
            await gameClient.ReadyAsync(!gameClient.player.IsReady);
        }
        await InvokeAsync(StateHasChanged);
    }


    public async void Dispose()
    {
        if (gameClient != null && gameClient.Connected)
        {
            gameClient.MessageArrived -= MessageArrived;
            gameClient.OpponentChanged -= OpponentChanged;
            gameClient.StartGameEvent -= StartGame;
            gameClient.TurnChanged -= TurnChanged;
            gameClient.EndGameEvent -= EndGame;

        }
        await gameClient.LeaveAsync();
        gameClient = null;
    }


    public async void MeBanAction(List<int> selectedList)
    {

    }
    public async void MePickAction(List<int> selectedList)
    {
        if (gameClient != null && gameClient.Connected)
        {
            await gameClient.PickAsync(selectedList);
        }
        await InvokeAsync(StateHasChanged);
    }

    public async void OpBanAction(List<int> selectedList)
    {
        if (gameClient != null && gameClient.Connected)
        {
            await gameClient.BanAsync(selectedList);
        }
        await InvokeAsync(StateHasChanged);
    }
    public async void OpPickAction(List<int> selectedList)
    {

    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private LangrisserHelper.Client.Services.IRoasterService RoasterService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private LangrisserHelper.Client.Services.IHeroService HeroService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private AuthenticationStateProvider AuthenticationStateProvider { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JsRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavManager { get; set; }
    }
}
#pragma warning restore 1591
